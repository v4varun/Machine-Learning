# -*- coding: utf-8 -*-
"""SentenceSimilarity_UniversalSentenceEncoder.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/136zAowgOcTgcMR9KNDMePJNJdVlCkFLJ

Referred doc-https://www.tensorflow.org/hub/tutorials/semantic_similarity_with_tf_hub_universal_encoder?hl=en

Installing tensorflow hub and then importing all required packages
"""

pip install tensorflow-hub

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

import tensorflow as tf
import tensorflow_hub as hub

from absl import logging

"""Loading the Universal Sentence Encoder's TF Hub module"""

module_url = "https://tfhub.dev/google/universal-sentence-encoder/4"
model = hub.load(module_url)

print ("module %s loaded" % module_url)

def embed(input):
    return model(input)

# Reduce logging output.
logging.set_verbosity(logging.ERROR)

"""Computing a representation for words"""

word1 = "King"
word2 = "Man"
word3 = "Queen"
word4 = "Woman"

words = [word1, word2, word3, word4]

word_embeddings = embed(words)

word_embeddings

for i, word_embedding in enumerate(np.array(word_embeddings).tolist()):

    print("Message: {}".format(words[i]))
    print("Embedding size: {}".format(len(word_embedding)))

    word_embedding_snippet = ", ".join(
      (str(x) for x in word_embedding[:3]))

    print("Embedding: [{}, ...]\n".format(word_embedding_snippet))

"""Computing a representation for each message, showing various lengths supported"""

word = "King"

sentence = "Word embedding or word vector is an approach with which we represent documents and words"

paragraph = (
    "Universal Sentence Encoder embeddings also support short paragraphs. "
    "The Universal Sentence Encoder encodes text into high dimensional vectors that can be used for text classification, semantic similarity, clustering and other natural language tasks "
    "It is trained on a variety of data sources and a variety of tasks with the aim of dynamically accommodating a wide variety of natural language understanding tasks.")

messages = [word, sentence, paragraph]

message_embeddings = embed(messages)

for i, message_embedding in enumerate(np.array(message_embeddings).tolist()):
    print("Message: {}".format(messages[i]))
    print("Embedding size: {}".format(len(message_embedding)))

    message_embedding_snippet = ", ".join(
      (str(x) for x in message_embedding[:3]))

    print("Embedding: [{}, ...]\n".format(message_embedding_snippet))

"""Function defined for generating correlation heatmap"""

def plot_similarity(labels, features):
    corr = np.inner(features, features)

    sns.set(font_scale = 1.2)

    g = sns.heatmap(
      corr,
      xticklabels = labels,
      yticklabels = labels,
      vmin = 0,
      vmax = 1,
      cmap = "YlGnBu"
    )

    g.set_xticklabels(labels, rotation = 90)
    g.set_title("Semantic Textual Similarity")

def run_and_plot(messages):
    message_embeddings = embed(messages)

    plot_similarity(messages, message_embeddings)

"""First , we will show similarities between words"""

words = [
    "king", "queen", "apple", "orange", "potato", "onion",
    "spinach", "seattle", "new york", "supply", "money",
    "finance", "stocks", "goods", "coffee", "tea"
]

words

import random

random.shuffle(words)

words

"""Similar words have high correlations"""

run_and_plot(words)

"""Similarity visualized for some sentences from different topics.."""

messages = [
    # Economics
    "Inflation is impacting purchasing power.",
    "Supply and demand dynamics heavily influence market prices.",
    "Economic recessions lead to increased unemployment rates.",
    "GDP growth is a fundamental measure of economic performance.",

    # Organisations
    "Leadership is pivotal for driving organizational success.",
    "Business ethics and integrity build trust with stakeholders.",
    "Partnerships and collaborations lead to opportunities for businesses.",

    # Food and health
    "The immune system protects the human body against germs.",
    "Eating apple is healthy",
    "Exercise is good for health",

    # Asking about Job
    "What does a typical day or week look like in this role?",
    "what is your job profile?",
]

random.shuffle(messages)
run_and_plot(messages)







